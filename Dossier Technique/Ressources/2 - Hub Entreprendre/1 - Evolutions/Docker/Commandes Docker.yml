docker-compose up -d :démarrer l'ensemble des conteneurs en arrière-plan ;

docker-compose ps :voir le statut de l'ensemble de votre stack ;

docker-compose logs -f --tail 5 :afficher les logs de votre stack ;

docker-compose stop :arrêter l'ensemble des services d'une stack ;

docker-compose down :détruire l'ensemble des ressources d'une stack ;

docker-compose config :valider la syntaxe de votre fichier docker-compose.yml




//Lancé un conteneur à partir d'une image

docker images : Liste les images sur ton PC

docket pull : telecharger une image depuis un dossier existant ou depuis le docker hub

 <nom de l'image> : lance le docker (it pour interactif)
	it pour interactif
	-d pour détaché => tourne en arriere plan (permet de continuer à utiliser la console pendant que votre conteneur tourne sur un autre processus)
	-p pour définir l'utilisation de ports. nous lui avons demandé de transférer le trafic du port 8080 vers le port 80 du conteneur

docker ps : liste les dockers lancés avec leurs id

docker stop <id du docker> : stop le docker avec l'id

docker rm <ID_RETOURNÉ_LORS_DU_DOCKER_RUN> : va détruire le conteneur et son contenu

p : supprimer l'ensemble des ressources manuelles dans Docker



// Créer une image
Pour créer une image Docker, vous savez utiliser les instructions suivantes :

    FROM qui vous permet de définir l'image source ;

    RUN qui vous permet d’exécuter des commandes dans votre conteneur ;

    ADD qui vous permet d'ajouter des fichiers dans votre conteneur ;

    WORKDIR qui vous permet de définir votre répertoire de travail ;

    EXPOSE qui permet de définir les ports d'écoute par défaut ;

    VOLUME qui permet de définir les volumes utilisables ;

    CMD qui permet de définir la commande par défaut lors de l’exécution de vos conteneurs Docker.
    
    
    
 // Build l'image
 
 docker build -t ocr-docker-build .
    -t permet de donner un nom à votre image Docke
    . est le répertoire où se trouve le Dockerfile
    